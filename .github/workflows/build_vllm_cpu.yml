name: Build and Release vLLM CPU Container

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
  workflow_dispatch:
    inputs:
      vllm_tag:
        description: "vLLM version tag (e.g., v0.9.2), leave empty to use vllm_versions file"
        required: false
        type: string
      dryrun:
        description: "Dry run (build only, no push/register)"
        required: false
        default: false
        type: boolean
      register_baseline:
        description: "Register baseline to API (only if dryrun=false)"
        required: false
        default: false
        type: boolean
permissions:
  contents: read
  packages: write

env:
  VLLM_REPO: vllm-project/vllm
  DOCKER_IMAGE_NAME: vllm-cpu
  GHCR_IMAGE_REPO: ghcr.io/koalavault-ai/vllm-cpu
  DOCKERHUB_IMAGE_REPO: ${{ vars.DOCKERHUB_USERNAME }}/vllm-cpu

jobs:
  build-and-measure:
    name: Build vLLM CPU (${{ matrix.arch }})
    runs-on: ubuntu-latest
    outputs:
      build_mode: ${{ steps.trigger.outputs.build_mode }}
      dryrun: ${{ steps.trigger.outputs.dryrun }}
      vllm_version: ${{ steps.meta.outputs.vllm_version }}
      vllm_build_version_full: ${{ steps.vllm_build_ver.outputs.vllm_build_version_full }}
      ct_version_full: ${{ steps.ct_tag.outputs.ct_version_full }}
      ct_version_wheel: ${{ steps.ct_tag.outputs.ct_version_wheel }}
    strategy:
      matrix:
        arch: [x86, aarch64]
    steps:
      - name: Determine trigger mode
        id: trigger
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tag push trigger
            TAG_NAME="${{ github.ref_name }}"
            echo "Triggered by tag: $TAG_NAME"
            
            # Determine build mode based on tag format
            if [[ "$TAG_NAME" =~ -rc\. ]]; then
              BUILD_MODE="rc"
              echo "RC tag detected, using RC mode"
            else
              BUILD_MODE="release"
              echo "Release tag detected, using release mode"
            fi
            
            DRYRUN="false"
            REGISTER_BASELINE="true"
          else
            # Manual workflow_dispatch trigger - always RC mode
            BUILD_MODE="rc"
            DRYRUN="${{ github.event.inputs.dryrun }}"
            REGISTER_BASELINE="${{ github.event.inputs.register_baseline }}"
            echo "Manual trigger - using RC mode"
          fi
          
          echo "build_mode=$BUILD_MODE" >> "$GITHUB_OUTPUT"
          echo "dryrun=$DRYRUN" >> "$GITHUB_OUTPUT"
          echo "register_baseline=$REGISTER_BASELINE" >> "$GITHUB_OUTPUT"
          
          echo "=== Trigger Configuration ==="
          echo "Build Mode: $BUILD_MODE"
          echo "Dry Run: $DRYRUN"
          echo "Register Baseline: $REGISTER_BASELINE"
      
      - name: Checkout vllm-build repo (for packages)
        uses: actions/checkout@v4
        with:
          path: vllm-build
          fetch-depth: 0
          fetch-tags: true

      - name: Determine vLLM version from tag message or input
        id: vllm_version
        working-directory: vllm-build
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tag push: try to get vLLM version from tag message
            TAG_NAME="${{ github.ref_name }}"
            TAG_MESSAGE=$(git tag -l --format='%(contents)' "$TAG_NAME" 2>/dev/null || echo "")
            
            if [[ "$TAG_MESSAGE" =~ vllm:\ *(v[0-9]+\.[0-9]+\.[0-9]+) ]]; then
              VLLM_TAG="${BASH_REMATCH[1]}"
              echo "vLLM version from tag message: $VLLM_TAG"
            else
              echo "No vLLM version in tag message, will use vllm_versions file"
              VLLM_TAG=""
            fi
          else
            # Manual trigger: use input
            VLLM_TAG="${{ github.event.inputs.vllm_tag }}"
            if [ -n "$VLLM_TAG" ]; then
              echo "vLLM version from input: $VLLM_TAG"
            else
              echo "No vLLM version in input, will use vllm_versions file"
            fi
          fi
          
          # If still empty, read from vllm_versions file
          if [ -z "$VLLM_TAG" ]; then
            VLLM_TAG=$(grep -v '^#' vllm_versions | grep -v '^$' | head -1 | tr -d '[:space:]')
            if [ -z "$VLLM_TAG" ]; then
              echo "::error::No vLLM version found in vllm_versions file"
              exit 1
            fi
            echo "Using vLLM version from vllm_versions file: $VLLM_TAG"
          fi
          
          echo "vllm_tag=$VLLM_TAG" >> "$GITHUB_OUTPUT"
          echo "Final vLLM version: $VLLM_TAG"

      - name: Checkout vLLM repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.VLLM_REPO }}
          ref: ${{ steps.vllm_version.outputs.vllm_tag }}
          path: vllm

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: Determine vLLM-Build version
        id: vllm_build_ver
        working-directory: vllm-build
        run: |
          BUILD_MODE="${{ steps.trigger.outputs.build_mode }}"
          
          if [ "$BUILD_MODE" = "rc" ]; then
            # RC mode: auto-calculate next RC version
            git fetch --tags
            LATEST_TAG=$(git tag -l 'v*' | sort -V | tail -1)
            
            if [ -z "$LATEST_TAG" ]; then
              # No tags exist, start with v0.0.1-rc.1
              BASE_VERSION="0.0.1"
              RC_NUM=1
            else
              # Remove 'v' prefix
              LATEST_VERSION="${LATEST_TAG#v}"
              
              if [[ "$LATEST_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc\.([0-9]+)$ ]]; then
                # Latest is an RC version, increment RC number
                BASE_VERSION="${BASH_REMATCH[1]}"
                RC_NUM=$((${BASH_REMATCH[2]} + 1))
              else
                # Latest is a release version, increment patch and start rc.1
                if [[ "$LATEST_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                  MAJOR="${BASH_REMATCH[1]}"
                  MINOR="${BASH_REMATCH[2]}"
                  PATCH="${BASH_REMATCH[3]}"
                  BASE_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                  RC_NUM=1
                else
                  echo "::error::Failed to parse version: $LATEST_VERSION"
                  exit 1
                fi
              fi
            fi
            
            VLLM_BUILD_VERSION="v${BASE_VERSION}-rc.${RC_NUM}"
            echo "Auto-calculated RC version: $VLLM_BUILD_VERSION"
          else
            # Release mode: must have exact matching tag
            VLLM_BUILD_VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "")
            if [ -z "$VLLM_BUILD_VERSION" ]; then
              echo "::error::Release mode requires exact tag match. Current commit has no tag."
              exit 1
            fi
            echo "Release mode - using tag: $VLLM_BUILD_VERSION"
          fi
          
          echo "vllm_build_version_full=$VLLM_BUILD_VERSION" >> "$GITHUB_OUTPUT"

      - name: Determine CryptoTensors release tag
        id: ct_tag
        working-directory: vllm-build
        env:
          GH_TOKEN: ${{ secrets.KOALAVAULT_TOKEN }}
        run: |
          BUILD_MODE="${{ steps.trigger.outputs.build_mode }}"
          if [ "$BUILD_MODE" = "rc" ]; then
            # Latest (may be rc)
            TAG=$(gh release view --repo KoalaVault-ai/cryptotensors --json tagName -q .tagName)
          else
            # Latest stable (exclude rc)
            TAG=$(gh release list --repo KoalaVault-ai/cryptotensors --limit 50 | grep -v 'rc\.' | head -1 | awk '{print $1}')
          fi
          echo "cryptotensors_tag=$TAG" >> "$GITHUB_OUTPUT"
          # Strip 'core/' prefix to get version-like tag (vX.Y.Z[-rc.N])
          CT_VER="${TAG#core/}"
          echo "ct_version_full=$CT_VER" >> "$GITHUB_OUTPUT"

      - name: Download cryptotensors packages by tag
        working-directory: vllm-build
        env:
          GH_TOKEN: ${{ secrets.KOALAVAULT_TOKEN }}
        run: |
          TAG="${{ steps.ct_tag.outputs.cryptotensors_tag }}"
          
          # Map architecture to wheel naming convention
          ARCH="${{ matrix.arch }}"
          if [ "$ARCH" = "x86" ]; then
            WHEEL_ARCH="x86_64"
          elif [ "$ARCH" = "aarch64" ]; then
            WHEEL_ARCH="aarch64"
          else
            WHEEL_ARCH="$ARCH"
          fi
          
          echo "Downloading by tag: $TAG for arch: $WHEEL_ARCH"
          
          # Clean up any existing wheel files first
          rm -f *.whl 2>/dev/null || true
          
          gh release download "$TAG" --repo KoalaVault-ai/cryptotensors --pattern "*manylinux*${WHEEL_ARCH}.whl"
          gh release download "$TAG" --repo KoalaVault-ai/cryptotensors --pattern "safetensors-*.whl"
          
          # Verify required files exist
          if ! ls cryptotensors-*-manylinux_*_${WHEEL_ARCH}.whl 1> /dev/null 2>&1; then
            echo "::error::cryptotensors wheel for $WHEEL_ARCH not found"
            echo "Available files:"
            ls -la *.whl 2>/dev/null || echo "No wheel files found"
            exit 1
          fi
          
          if ! ls safetensors-*.whl 1> /dev/null 2>&1; then
            echo "::error::safetensors wheel not found"
            exit 1
          fi
          
          echo "Downloaded packages:"
          ls -lh *.whl

      - name: Extract CryptoTensors version
        id: crypto_version
        working-directory: vllm-build
        run: |
          # Extract version from cryptotensors wheel filename (PEP 440 format)
          # e.g., cryptotensors-0.1.0rc1-cp38-abi3-manylinux_2_28_x86_64.whl -> 0.1.0rc1
          # e.g., cryptotensors-0.1.0-cp38-abi3-manylinux_2_28_x86_64.whl -> 0.1.0
          CRYPTO_WHL=$(ls cryptotensors-*-manylinux_*.whl | head -1)
          CRYPTO_VERSION_WHEEL=$(echo "$CRYPTO_WHL" | sed 's/cryptotensors-//' | sed 's/-cp.*//')
          CRYPTO_VERSION_CLEAN=$(echo "$CRYPTO_VERSION_WHEEL" | sed 's/rc/rc/')
          echo "ct_version_wheel=$CRYPTO_VERSION_WHEEL" >> "$GITHUB_OUTPUT"
          echo "ct_version_clean=$CRYPTO_VERSION_CLEAN" >> "$GITHUB_OUTPUT"
          echo "CryptoTensors wheel version: $CRYPTO_VERSION_WHEEL"
          echo "CryptoTensors wheel: $CRYPTO_WHL"

      - name: Copy packages to vLLM build directory
        run: |
          cp vllm-build/*.whl vllm/
          echo "Copied packages to vLLM directory:"
          ls -lh vllm/*.whl

      - name: Determine build metadata
        id: meta
        run: |
          set -euo pipefail
          
          VLLM_TAG="${{ steps.vllm_version.outputs.vllm_tag }}"
          PLATFORM_OS="linux"
          ARCH="${{ matrix.arch }}"
          
          # Map architecture to Docker platform
          if [ "$ARCH" = "x86" ]; then
            DOCKER_ARCH="amd64"
          elif [ "$ARCH" = "aarch64" ]; then
            DOCKER_ARCH="arm64"
          else
            DOCKER_ARCH="$ARCH"
          fi
          
          echo "vllm_version=$VLLM_TAG" >> "$GITHUB_OUTPUT"
          echo "platform_os=$PLATFORM_OS" >> "$GITHUB_OUTPUT"
          echo "arch=$ARCH" >> "$GITHUB_OUTPUT"
          echo "docker_arch=$DOCKER_ARCH" >> "$GITHUB_OUTPUT"

          # Get CryptoTensors version (wheel-based) and full tag (release-based)
          CT_VERSION_WHEEL="${{ steps.crypto_version.outputs.ct_version_wheel }}"
          CT_VERSION_CLEAN="${{ steps.crypto_version.outputs.ct_version_clean }}"
          CT_VERSION_FULL="${{ steps.ct_tag.outputs.ct_version_full }}"
          echo "ct_version_wheel=$CT_VERSION_WHEEL" >> "$GITHUB_OUTPUT"
          echo "ct_version_clean=$CT_VERSION_CLEAN" >> "$GITHUB_OUTPUT"
          echo "ct_version_full=$CT_VERSION_FULL" >> "$GITHUB_OUTPUT"
          
          # Get vllm-build version
          VLLM_BUILD_VERSION="${{ steps.vllm_build_ver.outputs.vllm_build_version_full }}"
          echo "vllm_build_version_full=$VLLM_BUILD_VERSION" >> "$GITHUB_OUTPUT"

          # Build framework version: vllm-{version}-{arch}-cpu-{os}-build-{vllm-build-ver}-cryptotensors-{crypto-ver}
          FRAMEWORK_VERSION="vllm-${VLLM_TAG}-${ARCH}-cpu-${PLATFORM_OS}-build-${VLLM_BUILD_VERSION}-cryptotensors-${CT_VERSION_FULL}"
          echo "framework_version=$FRAMEWORK_VERSION" >> "$GITHUB_OUTPUT"

          # Get current build date (YYYY-MM-DD format)
          BUILD_DATE=$(date -u +"%Y-%m-%d")
          echo "build_date=$BUILD_DATE" >> "$GITHUB_OUTPUT"

          echo "=== Build Metadata ==="
          echo "Arch: $ARCH"
          echo "Docker Arch: $DOCKER_ARCH"
          echo "Platform: cpu"
          echo "OS: $PLATFORM_OS"
          echo "vLLM Version: $VLLM_TAG"
          echo "vLLM-Build Version: $VLLM_BUILD_VERSION"
          echo "CryptoTensors Version: $CT_VERSION_FULL"
          echo "Framework Version: $FRAMEWORK_VERSION"
          echo "Build Date: $BUILD_DATE"

      - name: Set up QEMU for ARM64 cross-compilation
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Login GHCR
        if: ${{ steps.trigger.outputs.dryrun != 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build vLLM CPU base image (Stage 1)
        id: build_base
        working-directory: vllm
        run: |
          set -euo pipefail
          PLATFORM="${{ steps.meta.outputs.platform_os }}/${{ steps.meta.outputs.docker_arch }}"
          BASE_IMAGE_REF="vllm-cpu-base:${{ steps.meta.outputs.vllm_version }}-${{ steps.meta.outputs.arch }}"
          ARCH="${{ steps.meta.outputs.arch }}"
          
          echo "base_image_ref=${BASE_IMAGE_REF}" >> "$GITHUB_OUTPUT"

          # Stage 1: Build pure vLLM CPU image from source (no cryptotensors yet)
          echo "[Stage 1] Building pure vLLM CPU from source: ${{ steps.vllm_version.outputs.vllm_tag }}"
          echo "[Stage 1] Intermediate image: ${BASE_IMAGE_REF}"
          echo "[Stage 1] Platform: ${PLATFORM}"
          echo "[Stage 1] Architecture: ${ARCH}"
          
          # Set build arguments based on architecture
          BUILD_ARGS=""
          if [ "$ARCH" = "aarch64" ]; then
            echo "[Stage 1] ARM64 build: Adding optimization flags for aarch64"
            # For ARM64 builds, limit parallel jobs to avoid OOM in GitHub Actions
            BUILD_ARGS="--build-arg max_jobs=4"
          else
            echo "[Stage 1] x86_64 build: Using default build settings"
          fi
          
          docker buildx build \
            --builder default \
            --platform "${PLATFORM}" \
            --file docker/Dockerfile.cpu \
            --target vllm-openai \
            --tag "${BASE_IMAGE_REF}" \
            --provenance=false \
            --load \
            ${BUILD_ARGS} \
            .
          
          echo "[Stage 1] ✓ Base vLLM CPU image built successfully"

      - name: Build final image with CryptoTensors (Stage 2)
        id: build
        working-directory: vllm-build
        run: |
          set -euo pipefail
          VLLM_VERSION="${{ steps.meta.outputs.vllm_version }}"
          VLLM_BUILD_VERSION="${{ steps.meta.outputs.vllm_build_version_full }}"
          CT_VERSION="${{ steps.meta.outputs.ct_version_full }}"
          BUILD_MODE="${{ steps.trigger.outputs.build_mode }}"
          PLATFORM="${{ steps.meta.outputs.platform_os }}/${{ steps.meta.outputs.docker_arch }}"
          
          # Convert versions to PEP 440 format (remove hyphens before rc)
          # v0.0.3-rc.1 -> v0.0.3rc1
          VLLM_VERSION_TAG=$(echo "$VLLM_VERSION" | sed 's/-rc\./-rc/g' | sed 's/-rc/rc/g')
          VLLM_BUILD_VERSION_TAG=$(echo "$VLLM_BUILD_VERSION" | sed 's/-rc\./-rc/g' | sed 's/-rc/rc/g')
          CT_VERSION_TAG=$(echo "$CT_VERSION" | sed 's/-rc\./-rc/g' | sed 's/-rc/rc/g')
          
          # Primary tag uses PEP 440 format
          PRIMARY_TAG="vllm-${VLLM_VERSION_TAG}_build-${VLLM_BUILD_VERSION_TAG}_crypto-${CT_VERSION_TAG}"
          # Per-arch tag suffix
          if [ "${{ steps.meta.outputs.docker_arch }}" = "amd64" ]; then
            ARCH_SUFFIX="amd64"
          else
            ARCH_SUFFIX="arm64"
          fi
          IMAGE_REF_GHCR="${{ env.GHCR_IMAGE_REPO }}:${PRIMARY_TAG}-${ARCH_SUFFIX}"
          BASE_IMAGE_REF="${{ steps.build_base.outputs.base_image_ref }}"
          DRYRUN="${{ steps.trigger.outputs.dryrun }}"

          echo "image_ref=${IMAGE_REF_GHCR}" >> "$GITHUB_OUTPUT"

          # Stage 2: Install CryptoTensors on top of base image
          echo "[Stage 2] Installing CryptoTensors on base image"
          echo "[Stage 2] Base image: ${BASE_IMAGE_REF}"
          echo "[Stage 2] Target image: ${IMAGE_REF_GHCR}"
          echo "[Stage 2] Platform: ${PLATFORM}"
          
          # Use buildx with default builder to access local images from Stage 1
          if [ "$DRYRUN" = "true" ]; then
            echo "[Stage 2] Mode: DRY RUN (build only, no push)"
            docker buildx build \
              --builder default \
              --platform "${PLATFORM}" \
              --file Dockerfile \
              --build-arg "BASE_IMAGE=${BASE_IMAGE_REF}" \
              --build-arg "FRAMEWORK_VERSION=${{ steps.meta.outputs.framework_version }}" \
              --build-arg "VLLM_VERSION=${{ steps.meta.outputs.vllm_version }}" \
              --build-arg "VLLM_BUILD_VERSION=${{ steps.meta.outputs.vllm_build_version_full }}" \
              --build-arg "CRYPTOTENSORS_VERSION=${{ steps.meta.outputs.ct_version_full }}" \
              --build-arg "BUILD_DATE=${{ steps.meta.outputs.build_date }}" \
              --label "io.vllm.version=${VLLM_VERSION}" \
              --label "io.vllm.build=${VLLM_BUILD_VERSION}" \
              --label "io.cryptotensors.version=${CT_VERSION}" \
              --label "org.opencontainers.image.version=${PRIMARY_TAG}" \
              --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
              --tag "${IMAGE_REF_GHCR}" \
              --provenance=false \
              --load \
              .
          else
            echo "[Stage 2] Mode: RELEASE (build and push)"
            docker buildx build \
              --builder default \
              --platform "${PLATFORM}" \
              --file Dockerfile \
              --build-arg "BASE_IMAGE=${BASE_IMAGE_REF}" \
              --build-arg "FRAMEWORK_VERSION=${{ steps.meta.outputs.framework_version }}" \
              --build-arg "VLLM_VERSION=${{ steps.meta.outputs.vllm_version }}" \
              --build-arg "VLLM_BUILD_VERSION=${{ steps.meta.outputs.vllm_build_version_full }}" \
              --build-arg "CRYPTOTENSORS_VERSION=${{ steps.meta.outputs.ct_version_full }}" \
              --build-arg "BUILD_DATE=${{ steps.meta.outputs.build_date }}" \
              --label "io.vllm.version=${VLLM_VERSION}" \
              --label "io.vllm.build=${VLLM_BUILD_VERSION}" \
              --label "io.cryptotensors.version=${CT_VERSION}" \
              --label "org.opencontainers.image.version=${PRIMARY_TAG}" \
              --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
              --tag "${IMAGE_REF_GHCR}" \
              --provenance=false \
              --push \
              .
          fi
          
          echo "[Stage 2] ✓ Final image with CryptoTensors built successfully"

      - name: Print build summary
        run: |
          DRYRUN="${{ steps.trigger.outputs.dryrun }}"
          if [ "$DRYRUN" = "true" ]; then
            echo "✓ Build Complete: vLLM CPU Image Built (DRY RUN - not pushed)"
          else
            echo "✓ Build Complete: vLLM CPU Image Built and Pushed to GHCR (per-arch)"
          fi
          echo "Image: ${{ steps.build.outputs.image_ref }}"
          echo "Framework Version: ${{ steps.meta.outputs.framework_version }}"

      - name: Create and push GHCR manifest and aliases (only once)
        if: ${{ steps.trigger.outputs.dryrun != 'true' && matrix.arch == 'aarch64' }}
        run: |
          set -euo pipefail
          VLLM_VERSION="${{ steps.meta.outputs.vllm_version }}"
          VLLM_BUILD_VERSION="${{ steps.meta.outputs.vllm_build_version_full }}"
          CT_VERSION="${{ steps.meta.outputs.ct_version_full }}"
          BUILD_MODE="${{ steps.trigger.outputs.build_mode }}"
          
          # Convert versions to PEP 440 format
          VLLM_VERSION_TAG=$(echo "$VLLM_VERSION" | sed 's/-rc\./-rc/g' | sed 's/-rc/-rc/g')
          VLLM_BUILD_VERSION_TAG=$(echo "$VLLM_BUILD_VERSION" | sed 's/-rc\.//g')
          CT_VERSION_TAG=$(echo "$CT_VERSION" | sed 's/-rc\.//g')

          PRIMARY_TAG="vllm-${VLLM_VERSION_TAG}_build-${VLLM_BUILD_VERSION_TAG}_crypto-${CT_VERSION_TAG}"
          AMD="${{ env.GHCR_IMAGE_REPO }}:${PRIMARY_TAG}-amd64"
          ARM="${{ env.GHCR_IMAGE_REPO }}:${PRIMARY_TAG}-arm64"
          TARGET="${{ env.GHCR_IMAGE_REPO }}:${PRIMARY_TAG}"

          echo "Creating GHCR manifest: ${TARGET}"
          docker manifest create "${TARGET}" "${AMD}" "${ARM}"
          docker manifest push "${TARGET}"

          if [ "$BUILD_MODE" = "release" ]; then
            # User-friendly alias: vLLM version
            ALIAS="${{ env.GHCR_IMAGE_REPO }}:${VLLM_VERSION}"
            echo "Publishing alias manifest: $ALIAS -> ${AMD},${ARM}"
            docker manifest create "$ALIAS" "${AMD}" "${ARM}"
            docker manifest push "$ALIAS"
          else
            echo "RC mode: skip aliases"
          fi

      - name: Download hash-builder
        working-directory: vllm-build
        env:
          GH_TOKEN: ${{ secrets.KOALAVAULT_TOKEN }}
        run: |
          echo "[Stage 2] Downloading hash-builder"
          
          # Clean up any existing hash-builder files
          rm -f hash-builder* 2>/dev/null || true
          
          # Map architecture to binary naming convention
          ARCH="${{ matrix.arch }}"
          if [ "$ARCH" = "x86" ]; then
            BINARY_ARCH="x86_64"
            LIBC="gnu"
          elif [ "$ARCH" = "aarch64" ]; then
            BINARY_ARCH="aarch64"
            LIBC="musl"
          else
            echo "::error::Unsupported architecture: $ARCH"
            exit 1
          fi
          
          # Get CryptoTensors version and tag for hash-builder
          CT_TAG="${{ steps.ct_tag.outputs.cryptotensors_tag }}"
          CT_VERSION_FULL="${{ steps.ct_tag.outputs.ct_version_full }}"
          
          # Remove 'v' prefix from version for hash-builder filename
          HB_VERSION="${CT_VERSION_FULL#v}"
          
          # Build hash-builder filename based on version format
          # RC: hash-builder-0.1.0-rc.1-linux-x86_64-gnu
          # Release: hash-builder-0.1.0-linux-x86_64-gnu
          HB_FILENAME="hash-builder-${HB_VERSION}-linux-${BINARY_ARCH}-${LIBC}"
          
          echo "Downloading hash-builder: $HB_FILENAME from $CT_TAG"
          
          # Try versioned filename first, fallback to non-versioned if not found
          if gh release download "$CT_TAG" --repo KoalaVault-ai/cryptotensors --pattern "$HB_FILENAME" 2>/dev/null; then
            echo "Downloaded versioned hash-builder: $HB_FILENAME"
            mv "$HB_FILENAME" hash-builder
          else
            # Fallback: try without version (e.g., hash-builder--linux-x86_64-gnu)
            HB_FILENAME_FALLBACK="hash-builder--linux-${BINARY_ARCH}-${LIBC}"
            echo "Versioned file not found, trying: $HB_FILENAME_FALLBACK"
            gh release download "$CT_TAG" --repo KoalaVault-ai/cryptotensors --pattern "$HB_FILENAME_FALLBACK"
            mv "$HB_FILENAME_FALLBACK" hash-builder
          fi
          
          chmod +x hash-builder
          
          echo "Hash-builder downloaded:"
          ls -lh hash-builder
          ./hash-builder --version || echo "Hash-builder ready"

      - name: Build measurement image and extract hash (Stage 3)
        id: measure
        working-directory: vllm-build
        run: |
          set -euo pipefail
          
          echo "[Stage 3] Building measurement image and extracting baseline hash"
          echo "[Stage 3] Base image: ${{ steps.build.outputs.image_ref }}"
          mkdir -p ./measurements
          
          # Stage 3: Build measurement image using Dockerfile.measure with buildx for export
          # Note: Must use buildx for --output type=local
          docker buildx build \
            --builder default \
            -f Dockerfile.measure \
            --build-arg BASE_IMAGE="${{ steps.build.outputs.image_ref }}" \
            --target export \
            --output type=local,dest=./measurements \
            .
          
          echo "[Stage 3] Measurement file extracted to ./measurements/"
          ls -la ./measurements/
          
          # Read baseline hash from extracted file
          if [[ ! -f "./measurements/baseline_hash.txt" ]]; then
            echo "::error::baseline_hash.txt not found in measurements output"
            exit 1
          fi
          
          BASELINE_HASH="$(cat ./measurements/baseline_hash.txt | tr -d '\n')"
          if [[ -z "$BASELINE_HASH" ]]; then
            echo "::error::baseline_hash is empty in baseline_hash.txt"
            exit 1
          fi
          
          echo "baseline_hash=$BASELINE_HASH" >> "$GITHUB_OUTPUT"
          echo "[Stage 3] ✓ Baseline hash extracted: $BASELINE_HASH"

      - name: Register baseline to API
        if: ${{ steps.trigger.outputs.dryrun != 'true' && steps.trigger.outputs.register_baseline == 'true' }}
        working-directory: vllm-build
        run: |
          set -euo pipefail
          echo "[info] Registering baseline to API..."
          
          FRAMEWORK_VERSION="${{ steps.meta.outputs.framework_version }}"
          BASELINE_HASH="${{ steps.measure.outputs.baseline_hash }}"
          VLLM_VERSION="${{ steps.meta.outputs.vllm_version }}"
          VLLM_BUILD_VERSION="${{ steps.meta.outputs.vllm_build_version_full }}"
          CRYPTOTENSORS_VERSION="${{ steps.meta.outputs.ct_version_full }}"
          BUILD_DATE="${{ steps.meta.outputs.build_date }}"
          
          # Build version.json as a JSON string for description field
          VERSION_JSON_STR=$(jq -n \
            --arg fw "$FRAMEWORK_VERSION" \
            --arg framework "vllm" \
            --arg vllm "$VLLM_VERSION" \
            --arg build "$VLLM_BUILD_VERSION" \
            --arg crypto "$CRYPTOTENSORS_VERSION" \
            --arg date "$BUILD_DATE" \
            '{
              framework_version: $fw,
              framework: $framework,
              vllm_version: $vllm,
              vllm_build_version: $build,
              cryptotensors_version: $crypto,
              build_date: $date
            }' | jq -c .)
          
          # Build baseline data with description as a string
          BASELINE_DATA=$(jq -n \
            --arg fw "$FRAMEWORK_VERSION" \
            --arg framework_type "vllm" \
            --arg hash "$BASELINE_HASH" \
            --arg desc "$VERSION_JSON_STR" \
            --arg tag "$VLLM_VERSION" \
            '{
              framework_version: $fw,
              framework_type: $framework_type,
              baseline_hash: $hash,
              description: $desc,
              tag: $tag
            }')
          
          echo "[info] Registering baseline: $FRAMEWORK_VERSION with hash: $BASELINE_HASH"
          echo "[debug] Baseline data:"
          echo "$BASELINE_DATA" | jq .
          
          echo "[info] Getting admin JWT token..."
          TOKEN_RESPONSE=$(curl -s -X POST "${{ vars.KOALAVAULT_API_BASE_URL }}/api/admin/api-key-login" \
            -H "Content-Type: application/json" \
            -d "{\"api_key\": \"${{ secrets.KOALAVAULT_ADMIN_API_KEY }}\"}")
          
          JWT_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.data.access_token')
          
          if [ "$JWT_TOKEN" = "null" ] || [ -z "$JWT_TOKEN" ]; then
            echo "::error::Failed to get JWT token"
            echo "$TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "[info] JWT token obtained successfully"
          
          RESPONSE=$(curl -s -X POST "${{ vars.KOALAVAULT_API_BASE_URL }}/api/admin/framework/baselines" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BASELINE_DATA")
          
          if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
            BASELINE_ID=$(echo "$RESPONSE" | jq -r '.data.id')
            echo "[info] Baseline registered successfully with ID: $BASELINE_ID"
            echo "[info] Note: Baseline is registered but not activated. Please activate manually if needed."
          else
            echo "::error::Failed to register baseline"
            echo "$RESPONSE"
            exit 1
          fi

      - name: Final summary
        run: |
          echo "=========================================="
          echo "Build and Measurement Complete"
          echo "=========================================="
          echo "vLLM Version: ${{ steps.meta.outputs.vllm_version }}"
          echo "Docker Image: ${{ steps.build.outputs.image_ref }}"
          echo "Framework Version: ${{ steps.meta.outputs.framework_version }}"
          echo "Baseline Hash: ${{ steps.measure.outputs.baseline_hash }}"
          echo "Build Date: ${{ steps.meta.outputs.build_date }}"
          echo "=========================================="
          if [ "${{ steps.trigger.outputs.dryrun }}" = "true" ]; then
            echo "Mode: DRY RUN (image built but not pushed)"
          else
            echo "Mode: RELEASE (image pushed to GHCR)"
            if [ "${{ steps.trigger.outputs.register_baseline }}" = "true" ]; then
              echo "Baseline: Registered to API"
            else
              echo "Baseline: Not registered (register_baseline=false)"
            fi
          fi

  publish-dockerhub:
    name: Publish to Docker Hub (mirror GHCR digest)
    needs: build-and-measure
    if: ${{ needs.build-and-measure.outputs.build_mode == 'release' && needs.build-and-measure.outputs.dryrun != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Mirror primary tag to Docker Hub via imagetools
        run: |
          set -euo pipefail
          VLLM_VERSION='${{ needs.build-and-measure.outputs.vllm_version }}'
          VLLM_BUILD_VERSION='${{ needs.build-and-measure.outputs.vllm_build_version_full }}'
          CT_VERSION='${{ needs.build-and-measure.outputs.ct_version_full }}'
          
          # Convert versions to PEP 440 format
          VLLM_VERSION_TAG=$(echo "$VLLM_VERSION" | sed 's/-rc\./-rc/g' | sed 's/-rc/-rc/g')
          VLLM_BUILD_VERSION_TAG=$(echo "$VLLM_BUILD_VERSION" | sed 's/-rc\.//g')
          CT_VERSION_TAG=$(echo "$CT_VERSION" | sed 's/-rc\.//g')

          PRIMARY_TAG="vllm-${VLLM_VERSION_TAG}_build-${VLLM_BUILD_VERSION_TAG}_crypto-${CT_VERSION_TAG}"
          SRC="${{ env.GHCR_IMAGE_REPO }}:${PRIMARY_TAG}"
          DST="${{ env.DOCKERHUB_IMAGE_REPO }}:${PRIMARY_TAG}"

          echo "Mirroring ${SRC} -> ${DST}"
          # Skip if already exists
          if docker buildx imagetools inspect "${DST}" > /dev/null 2>&1; then
            echo "Tag already exists on Docker Hub, skipping: ${DST}"
          else
            docker buildx imagetools create --tag "${DST}" "${SRC}"
          fi

      - name: Create/update Docker Hub aliases
        run: |
          set -euo pipefail
          VLLM_VERSION='${{ needs.build-and-measure.outputs.vllm_version }}'
          VLLM_BUILD_VERSION='${{ needs.build-and-measure.outputs.vllm_build_version_full }}'
          CT_VERSION='${{ needs.build-and-measure.outputs.ct_version_full }}'
          
          # Convert versions to PEP 440 format
          VLLM_VERSION_TAG=$(echo "$VLLM_VERSION" | sed 's/-rc\./-rc/g' | sed 's/-rc/-rc/g')
          VLLM_BUILD_VERSION_TAG=$(echo "$VLLM_BUILD_VERSION" | sed 's/-rc\.//g')
          CT_VERSION_TAG=$(echo "$CT_VERSION" | sed 's/-rc\.//g')

          PRIMARY_TAG="vllm-${VLLM_VERSION_TAG}_build-${VLLM_BUILD_VERSION_TAG}_crypto-${CT_VERSION_TAG}"
          SRC="${{ env.DOCKERHUB_IMAGE_REPO }}:${PRIMARY_TAG}"

          # User-friendly alias on Docker Hub: vLLM version
          ALIAS="${{ env.DOCKERHUB_IMAGE_REPO }}:${VLLM_VERSION}"
          
          if docker buildx imagetools inspect "$ALIAS" > /dev/null 2>&1; then
            echo "Alias already exists, updating to point to ${SRC}: $ALIAS"
          fi
          docker buildx imagetools create --tag "$ALIAS" "$SRC"
