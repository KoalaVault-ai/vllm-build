name: Build and Release vLLM Container

on:
  workflow_dispatch:
    inputs:
      base_image:
        description: "Base image (e.g., vllm/vllm-openai:v0.9.2, vllm-cpu-arm:v0.9.2)"
        required: false
        default: "vllm/vllm-openai:v0.9.2"
        type: string
      platform_os:
        description: "Platform OS (e.g., linux)"
        required: false
        default: "linux"
        type: string
      arch:
        description: "Architecture (e.g., amd64, arm64)"
        required: false
        default: "amd64"
        type: string
      dryrun:
        description: "Dry run (build only, no push/register)"
        required: false
        default: false
        type: boolean
      register_baseline:
        description: "Register baseline to API (only if dryrun=false)"
        required: false
        default: false
        type: boolean
permissions:
  contents: read

env:
  DOCKERFILE: Dockerfile

jobs:
  build-and-measure:
    name: Build, Measure and Register
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read vLLM-Build version
        id: vllm_build_ver
        run: |
          # Get version from git tag (must be exact match on current commit)
          VLLM_BUILD_VERSION=$(git describe --tags --exact-match 2>/dev/null)
          if [ -z "$VLLM_BUILD_VERSION" ]; then
            echo "::error::No git tag found for current commit. Please create a tag first."
            exit 1
          fi
          echo "vllm_build_version=$VLLM_BUILD_VERSION" >> "$GITHUB_OUTPUT"
          echo "vLLM-Build version from git: $VLLM_BUILD_VERSION"

      - name: Download cryptotensors packages
        uses: robinraju/release-downloader@v1
        with:
          repository: koalavault/cryptotensors
          latest: true
          fileName: |
            safetensors-*.whl
            cryptotensors-*-linux_*.whl
          token: ${{ secrets.KOALAVAULT_TOKEN }}

      - name: Extract CryptoTensors version
        id: crypto_version
        run: |
          # Extract version from cryptotensors wheel filename
          # e.g., cryptotensors-0.1.0-cp38-abi3-linux_x86_64.whl -> v0.1.0
          CRYPTO_WHL=$(ls cryptotensors-*.whl | head -1)
          CRYPTO_VERSION=$(echo "$CRYPTO_WHL" | sed 's/cryptotensors-//' | sed 's/-cp.*//')
          CRYPTO_VERSION="v${CRYPTO_VERSION}"
          echo "cryptotensors_version=$CRYPTO_VERSION" >> "$GITHUB_OUTPUT"
          echo "CryptoTensors version: $CRYPTO_VERSION"

      - name: Determine build metadata
        id: meta
        run: |
          set -euo pipefail
          # Get inputs
          BASE_IMAGE="${{ github.event.inputs.base_image }}"
          echo "base_image=$BASE_IMAGE" >> "$GITHUB_OUTPUT"
          
          PLATFORM_OS="${{ github.event.inputs.platform_os }}"
          ARCH="${{ github.event.inputs.arch }}"
          echo "platform_os=$PLATFORM_OS" >> "$GITHUB_OUTPUT"
          echo "arch=$ARCH" >> "$GITHUB_OUTPUT"
          
          # Extract image name from base image
          # Step 1: Remove repository path (everything before last /)
          # Step 2: Remove tag (everything after :)
          # e.g., vllm/vllm-openai:v0.9.2 -> vllm-openai
          # e.g., vllm-cpu-arm:v0.9.2 -> vllm-cpu-arm
          IMAGE_NAME=$(echo "$BASE_IMAGE" | sed 's|.*/||' | sed 's/:.*$//')
          echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          
          # Extract tag from base image (this is the vLLM version)
          IMAGE_TAG=$(echo "$BASE_IMAGE" | sed 's/.*://')
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "vllm_version=$IMAGE_TAG" >> "$GITHUB_OUTPUT"

          # Get CryptoTensors version
          CRYPTO_VERSION="${{ steps.crypto_version.outputs.cryptotensors_version }}"
          echo "cryptotensors_version=$CRYPTO_VERSION" >> "$GITHUB_OUTPUT"
          
          # Get vllm-build version from version.json file
          VLLM_BUILD_VERSION="${{ steps.vllm_build_ver.outputs.vllm_build_version }}"
          echo "vllm_build_version=$VLLM_BUILD_VERSION" >> "$GITHUB_OUTPUT"

          # Auto-detect platform suffix from base image name (lowercase)
          PLATFORM_SUFFIX="cuda"
          if [[ "$BASE_IMAGE" =~ cpu ]]; then
            PLATFORM_SUFFIX="cpu"
          elif [[ "$BASE_IMAGE" =~ rocm ]]; then
            PLATFORM_SUFFIX="rocm"
          elif [[ "$BASE_IMAGE" =~ tpu ]]; then
            PLATFORM_SUFFIX="tpu"
          fi
          
          # Build framework version: vllm-{version}-{arch}-{cuda/cpu}-{os}-build-{vllm-build-ver}-cryptotensors-{crypto-ver}
          FRAMEWORK_VERSION="vllm-${IMAGE_TAG}-${ARCH}-${PLATFORM_SUFFIX}-${PLATFORM_OS}-build-${VLLM_BUILD_VERSION}-cryptotensors-${CRYPTO_VERSION}"
          echo "framework_version=$FRAMEWORK_VERSION" >> "$GITHUB_OUTPUT"

          # Get current build date (YYYY-MM-DD format)
          BUILD_DATE=$(date -u +"%Y-%m-%d")
          echo "build_date=$BUILD_DATE" >> "$GITHUB_OUTPUT"

          echo "=== Build Metadata ==="
          echo "Base Image: $BASE_IMAGE"
          echo "Image Name: $IMAGE_NAME"
          echo "Arch: $ARCH"
          echo "Platform: $PLATFORM_SUFFIX"
          echo "OS: $PLATFORM_OS"
          echo "vLLM Version: $IMAGE_TAG"
          echo "vLLM-Build Version: $VLLM_BUILD_VERSION"
          echo "CryptoTensors Version: $CRYPTO_VERSION"
          echo "Framework Version: $FRAMEWORK_VERSION"
          echo "Build Date: $BUILD_DATE"

      - uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        if: ${{ github.event.inputs.dryrun != 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build application image
        id: build
        run: |
          set -euo pipefail
          IMAGE_NAME="${{ steps.meta.outputs.image_name }}"
          TAG="${{ steps.meta.outputs.image_tag }}"
          PLATFORM="${{ steps.meta.outputs.platform_os }}/${{ steps.meta.outputs.arch }}"
          IMAGE_REF="${{ vars.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TAG}"
          DRYRUN="${{ github.event.inputs.dryrun }}"
          echo "image_ref=${IMAGE_REF}" >> "$GITHUB_OUTPUT"

          # Build application image
          echo "[Stage 1] Building from base image: ${{ steps.meta.outputs.base_image }}"
          echo "[Stage 1] Target image: ${IMAGE_REF}"
          echo "[Stage 1] Platform: ${PLATFORM}"
          if [ "$DRYRUN" = "true" ]; then
            echo "[Stage 1] Mode: DRY RUN (build only, no push)"
            docker buildx build \
              --platform "${PLATFORM}" \
              --file "${{ env.DOCKERFILE }}" \
              --build-arg "BASE_IMAGE=${{ steps.meta.outputs.base_image }}" \
              --build-arg "FRAMEWORK_VERSION=${{ steps.meta.outputs.framework_version }}" \
              --build-arg "VLLM_VERSION=${{ steps.meta.outputs.vllm_version }}" \
              --build-arg "VLLM_BUILD_VERSION=${{ steps.meta.outputs.vllm_build_version }}" \
              --build-arg "CRYPTOTENSORS_VERSION=${{ steps.meta.outputs.cryptotensors_version }}" \
              --build-arg "BUILD_DATE=${{ steps.meta.outputs.build_date }}" \
              --tag "${IMAGE_REF}" \
              --provenance=false \
              --load \
              .
          else
            echo "[Stage 1] Mode: RELEASE (build and push)"
            docker buildx build \
              --platform "${PLATFORM}" \
              --file "${{ env.DOCKERFILE }}" \
              --build-arg "BASE_IMAGE=${{ steps.meta.outputs.base_image }}" \
              --build-arg "FRAMEWORK_VERSION=${{ steps.meta.outputs.framework_version }}" \
              --build-arg "VLLM_VERSION=${{ steps.meta.outputs.vllm_version }}" \
              --build-arg "VLLM_BUILD_VERSION=${{ steps.meta.outputs.vllm_build_version }}" \
              --build-arg "CRYPTOTENSORS_VERSION=${{ steps.meta.outputs.cryptotensors_version }}" \
              --build-arg "BUILD_DATE=${{ steps.meta.outputs.build_date }}" \
              --tag "${IMAGE_REF}" \
              --provenance=false \
              --push \
              .
          fi

      - name: Print build summary
        run: |
          DRYRUN="${{ github.event.inputs.dryrun }}"
          if [ "$DRYRUN" = "true" ]; then
            echo "✓ Build Complete: Application Image Built (DRY RUN - not pushed)"
          else
            echo "✓ Build Complete: Application Image Built and Pushed"
          fi
          echo "Image: ${{ steps.build.outputs.image_ref }}"
          echo "Image Name: ${{ steps.meta.outputs.image_name }}"
          echo "Platform: ${{ steps.meta.outputs.platform_os }}/${{ steps.meta.outputs.arch }}"
          echo "vLLM Version: ${{ steps.meta.outputs.vllm_version }}"
          echo "vLLM-Build Version: ${{ steps.meta.outputs.vllm_build_version }}"
          echo "CryptoTensors Version: ${{ steps.meta.outputs.cryptotensors_version }}"
          echo "Framework Version: ${{ steps.meta.outputs.framework_version }}"
          echo "Dry Run: $DRYRUN"

      - name: Determine hash-builder architecture
        id: hash_arch
        run: |
          ARCH="${{ steps.meta.outputs.arch }}"
          # Map arch to hash-builder file naming convention
          if [[ "$ARCH" == "amd64" ]]; then
            HASH_ARCH="x86_64"
          elif [[ "$ARCH" == "arm64" ]]; then
            HASH_ARCH="aarch64"
          else
            HASH_ARCH="$ARCH"
          fi
          echo "hash_arch=$HASH_ARCH" >> "$GITHUB_OUTPUT"
          echo "Hash-builder architecture: linux-${HASH_ARCH}"

      - name: Download hash-builder binary
        uses: robinraju/release-downloader@v1
        with:
          repository: koalavault/cryptotensors
          latest: true
          fileName: hash-builder-linux-${{ steps.hash_arch.outputs.hash_arch }}
          token: ${{ secrets.KOALAVAULT_TOKEN }}
          
      - name: Prepare hash-builder
        run: |
          mv hash-builder-linux-${{ steps.hash_arch.outputs.hash_arch }} hash-builder
          chmod +x hash-builder

      - name: Build measurement image and extract hash
        id: measure
        run: |
          set -euo pipefail
          
          echo "Building measurement image with BuildKit export"
          echo "Base image: ${{ steps.build.outputs.image_ref }}"
          mkdir -p ./measurements
          
          docker buildx build \
            -f Dockerfile.measure \
            --build-arg BASE_IMAGE="${{ steps.build.outputs.image_ref }}" \
            --target export \
            --output type=local,dest=./measurements \
            .
          
          echo "Measurement file extracted to ./measurements/"
          ls -la ./measurements/
          
          if [[ ! -f "./measurements/baseline_hash.txt" ]]; then
            echo "::error::baseline_hash.txt not found in measurements output"
            exit 1
          fi
          
          MEAS_HASH="$(cat ./measurements/baseline_hash.txt | tr -d '\n')"
          if [[ -z "$MEAS_HASH" ]]; then
            echo "::error::measurement_hash is empty in baseline_hash.txt"
            exit 1
          fi
          
          echo "measurement_hash=$MEAS_HASH" >> "$GITHUB_OUTPUT"
          echo "Measurement hash: $MEAS_HASH"

      - name: Print baseline information
        run: |
          echo "✓ Baseline Measured Successfully"
          echo "=== Baseline Information ==="
          echo "Framework Version: ${{ steps.meta.outputs.framework_version }}"
          echo "Measurement Hash: ${{ steps.measure.outputs.measurement_hash }}"
          echo "Framework Type: vllm"
          echo "Image: ${{ steps.build.outputs.image_ref }}"
          echo "================================"

      - name: Register baseline to API
        if: ${{ github.event.inputs.dryrun != 'true' && github.event.inputs.register_baseline == 'true' && vars.KOALAVAULT_API_BASE_URL != '' }}
        run: |
          set -euo pipefail
          
          echo "[info] Registering baseline to API..."
          
          BASELINE_HASH="${{ steps.measure.outputs.measurement_hash }}"
          FRAMEWORK_VERSION="${{ steps.meta.outputs.framework_version }}"
          VLLM_VERSION="${{ steps.meta.outputs.vllm_version }}"
          VLLM_BUILD_VERSION="${{ steps.meta.outputs.vllm_build_version }}"
          CRYPTOTENSORS_VERSION="${{ steps.meta.outputs.cryptotensors_version }}"
          BUILD_DATE="${{ steps.meta.outputs.build_date }}"
          
          # Build complete version.json content for description
          VERSION_JSON=$(cat <<EOF
          {
            "framework_version": "$FRAMEWORK_VERSION",
            "framework": "vllm",
            "vllm_version": "$VLLM_VERSION",
            "vllm_build_version": "$VLLM_BUILD_VERSION",
            "cryptotensors_version": "$CRYPTOTENSORS_VERSION",
            "build_date": "$BUILD_DATE"
          }
          EOF
          )
          
          BASELINE_DATA=$(cat <<EOF
          {
            "framework_version": "$FRAMEWORK_VERSION",
            "framework_type": "vllm",
            "baseline_hash": "$BASELINE_HASH",
            "description": $(echo "$VERSION_JSON" | jq -c .),
            "tag": "$VLLM_VERSION"
          }
          EOF
          )
          
          echo "[info] Registering baseline: $FRAMEWORK_VERSION with hash: $BASELINE_HASH"
          
          echo "[info] Getting admin JWT token..."
          TOKEN_RESPONSE=$(curl -s -X POST "${{ vars.KOALAVAULT_API_BASE_URL }}/api/admin/api-key-login" \
            -H "Content-Type: application/json" \
            -d "{\"api_key\": \"${{ secrets.KOALAVAULT_ADMIN_API_KEY }}\"}")
          
          JWT_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.data.access_token')
          
          if [ "$JWT_TOKEN" = "null" ] || [ -z "$JWT_TOKEN" ]; then
            echo "::error::Failed to get JWT token"
            echo "$TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "[info] JWT token obtained successfully"
          
          RESPONSE=$(curl -s -X POST "${{ vars.KOALAVAULT_API_BASE_URL }}/api/admin/framework/baselines" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BASELINE_DATA")
          
          if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
            BASELINE_ID=$(echo "$RESPONSE" | jq -r '.data.id')
            echo "[info] Baseline registered successfully with ID: $BASELINE_ID"
            echo "[info] Note: Baseline is registered but not activated. Please activate manually if needed."
          else
            echo "::error::Failed to register baseline"
            echo "$RESPONSE"
            exit 1
          fi
